import { Injectable, Logger } from '@nestjs/common';
import { PrismaService } from '../../prisma/prisma.service';
import { CreateProjectTeamRequest } from '../dto/request/create.projectTeam.request';
import { UpdateProjectTeamRequest } from '../dto/request/update.projectTeam.request';
import {
    NotFoundProjectException,
    UploadProjectException,
    CloseProjectException,
    DeleteProjectException,
    DuplicateProjectNameException,
} from '../../../global/exception/custom.exception';
import { StatusCategory } from '@prisma/client';

@Injectable()
export class ProjectTeamRepository {
    private readonly logger = new Logger(ProjectTeamRepository.name);

    constructor(private readonly prisma: PrismaService) {}

    async findProjectByName(name: string): Promise<boolean> {
        try {
            this.logger.debug(`üîç [INFO] ÌîÑÎ°úÏ†ùÌä∏ Ïù¥Î¶Ñ Ï§ëÎ≥µ ÌôïÏù∏ Ï§ë: ${name}`);
            const existingProject = await this.prisma.projectTeam.findUnique({
                where: { name },
            });
            return !!existingProject;
        } catch (error) {
            this.logger.error(
                `‚ùå [ERROR] checkIfProjectNameExists Ï§ë ÏòàÏô∏ Î∞úÏÉù: ${name}`,
                error,
            );
            throw new DuplicateProjectNameException();
        }
    }

    async isUserMemberOfProject(
        projectTeamId: number,
        userId: number,
    ): Promise<boolean> {
        try {
            const exists = await this.prisma.projectMember.findFirst({
                where: {
                    projectTeamId: projectTeamId,
                    userId: userId,
                    isDeleted: false,
                },
                select: { id: true },
            });
            this.logger.debug(
                `üîç [INFO] isUserMemberOfProject: Project (ID: ${projectTeamId}), User (ID: ${userId}) ‚Üí Result: ${exists !== null}`,
            );
            return exists !== null;
        } catch (error) {
            this.logger.error(
                `‚ùå [ERROR] isUserMemberOfProject failed for Project (ID: ${projectTeamId}), User (ID: ${userId})`,
                error,
            );
            throw error;
        }
    }

    async createProject(
        createProjectTeamRequest: CreateProjectTeamRequest,
    ): Promise<any> {
        try {
            this.logger.debug('üî• [START] createProjectTeam ÏöîÏ≤≠ ÏãúÏûë');

            // DTOÏóêÏÑú Ï∂îÏ∂úÎêú Îç∞Ïù¥ÌÑ∞
            const {
                projectMember,
                resultImages,
                frontendNum, // ÌïÑÏàò ÌïÑÎìú Ï∂îÍ∞Ä
                backendNum,
                devopsNum,
                uiuxNum,
                dataEngineerNum,
                ...projectData
            } = createProjectTeamRequest;

            // Í∏∞Î≥∏Í∞í ÏÑ§Ï†ï
            const validProjectMember = Array.isArray(projectMember)
                ? projectMember
                : [];
            const validResultImages = Array.isArray(resultImages)
                ? resultImages
                : [];

            // Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÏöîÏ≤≠
            const projectTeam = await this.prisma.projectTeam.create({
                data: {
                    ...projectData,
                    frontendNum,
                    backendNum,
                    devopsNum,
                    uiuxNum,
                    dataEngineerNum, // Ï∂îÍ∞Ä
                    githubLink: projectData.githubLink || '',
                    notionLink: projectData.notionLink || '',
                    recruitExplain:
                        projectData.recruitExplain || 'ÌîÑÎ°úÏ†ùÌä∏ Î™®Ïßë ÏÑ§Î™Ö',
                    projectMember: {
                        create: validProjectMember.map((member) => ({
                            user: { connect: { id: member.userId } },
                            isLeader: member.isLeader,
                            teamRole: member.teamRole, // ÌïÑÏàò ÌïÑÎìú Í∏∞Î≥∏Í∞í Ï∂îÍ∞Ä
                            summary: 'Ï¥àÍ∏∞ Ï∞∏Ïó¨ Ïù∏ÏõêÏûÖÎãàÎã§',
                            status: 'APPROVED' as StatusCategory, // ÌïÑÏàò ÌïÑÎìú Ï∂îÍ∞Ä
                        })),
                    },
                    resultImages: {
                        create: validResultImages.map((imageUrl) => ({
                            imageUrl,
                        })),
                    },
                },
                include: {
                    projectMember: true,
                    resultImages: true,
                },
            });

            this.logger.debug('‚úÖ Project created successfully');
            return projectTeam;
        } catch (error) {
            this.logger.error('‚ùå Error while creating project', error);
            throw new UploadProjectException();
        }
    }

    async closeProject(id: number): Promise<any> {
        try {
            const closedProject = await this.prisma.projectTeam.update({
                where: { id },
                data: { isRecruited: false },
            });

            this.logger.debug('‚úÖ Project closed successfully');
            return closedProject;
        } catch (error) {
            this.logger.error('‚ùå Error while closing project', error);
            throw new CloseProjectException();
        }
    }

    async deleteProject(id: number): Promise<any> {
        try {
            const deletedProject = await this.prisma.projectTeam.update({
                where: { id },
                data: { isDeleted: true },
            });

            this.logger.debug('‚úÖ Project deleted successfully');
            return deletedProject;
        } catch (error) {
            this.logger.error('‚ùå Error while deleting project', error);
            throw new DeleteProjectException();
        }
    }

    async getProjectById(id: number): Promise<any> {
        try {
            const project = await this.prisma.projectTeam.findUnique({
                where: {
                    id,
                    isDeleted: false,
                },
                include: {
                    resultImages: { where: { isDeleted: false } },
                    projectMember: { where: { isDeleted: false } },
                },
            });

            if (!project) {
                throw new NotFoundProjectException();
            }

            this.logger.debug('‚úÖ Project retrieved successfully');
            return project;
        } catch (error) {
            this.logger.error('‚ùå Error while retrieving project', error);
            throw new NotFoundProjectException();
        }
    }

    async updateProjectTeam(
        id: number,
        updateData: Partial<UpdateProjectTeamRequest>,
        imageUrls: string[] = [],
        projectMembers: {
            userId: number;
            isLeader: boolean;
            teamRole?: string;
            summary?: string;
        }[] = [],
        teamStacks: { id: number; stackId: number; isMain: boolean }[] = [],
    ): Promise<any> {
        try {
            this.logger.debug(
                `üî• [START] updateProjectTeam ÏöîÏ≤≠ ÏãúÏûë: Project ID: ${id}`,
            );

            // ÌîÑÎ°úÏ†ùÌä∏ Î©§Î≤Ñ Ï≤òÎ¶¨
            this.logger.debug('üîç [INFO] ÌîÑÎ°úÏ†ùÌä∏ Î©§Î≤Ñ Ï≤òÎ¶¨ ÏãúÏûë');
            const userIds =
                Array.isArray(projectMembers) && projectMembers.length > 0
                    ? projectMembers.map((member) => member.userId)
                    : [];

            const existingProjectMembers =
                await this.prisma.projectMember.findMany({
                    where: {
                        projectTeamId: id,
                        userId: { in: userIds },
                    },
                    select: {
                        id: true,
                        userId: true,
                    },
                });

            this.logger.debug(
                `üîç [INFO] Í∏∞Ï°¥ ÌîÑÎ°úÏ†ùÌä∏ Î©§Î≤Ñ Ï°∞Ìöå ÏôÑÎ£å: ${JSON.stringify(existingProjectMembers)}`,
            );

            const projectMemberIdMap = existingProjectMembers.reduce(
                (acc, member) => {
                    acc[member.userId] = member.id;
                    return acc;
                },
                {},
            );

            const upsertMembers =
                Array.isArray(projectMembers) && projectMembers.length > 0
                    ? projectMembers.map((member) => {
                          const existingId = projectMemberIdMap[member.userId];
                          return {
                              where: { id: existingId || 0 },
                              create: {
                                  user: { connect: { id: member.userId } },
                                  isLeader: member.isLeader,
                                  teamRole: member.teamRole || 'Default Role',
                                  summary: member.summary || 'Default Summary',
                                  status: 'APPROVED' as StatusCategory,
                              },
                              update: {
                                  isLeader: member.isLeader,
                                  teamRole: member.teamRole || 'Default Role',
                                  summary: member.summary || 'Default Summary',
                                  status: 'APPROVED' as StatusCategory,
                              },
                          };
                      })
                    : [];

            this.logger.debug(
                `üîç [INFO] upsertMembers Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ± ÏôÑÎ£å: ${JSON.stringify(upsertMembers)}`,
            );

            // ÌåÄ Ïä§ÌÉù Ï≤òÎ¶¨
            this.logger.debug('üîç [INFO] ÌåÄ Ïä§ÌÉù Ï≤òÎ¶¨ ÏãúÏûë');
            const stackIds =
                Array.isArray(teamStacks) && teamStacks.length > 0
                    ? teamStacks.map((stack) => stack.id)
                    : [];

            const existingTeamStacks = await this.prisma.teamStack.findMany({
                where: {
                    projectTeamId: id,
                    id: { in: stackIds },
                },
                select: {
                    id: true,
                },
            });

            this.logger.debug(
                `üîç [INFO] Í∏∞Ï°¥ ÌåÄ Ïä§ÌÉù Ï°∞Ìöå ÏôÑÎ£å: ${JSON.stringify(existingTeamStacks)}`,
            );

            const teamStackIdMap = existingTeamStacks.reduce((acc, stack) => {
                acc[stack.id] = stack.id;
                return acc;
            }, {});

            const upsertStacks =
                Array.isArray(teamStacks) && teamStacks.length > 0
                    ? teamStacks.map((stack) => {
                          const existingId = teamStackIdMap[stack.id];
                          return {
                              where: { id: existingId || 0 },
                              create: {
                                  stack: { connect: { id: stack.stackId } },
                                  isMain: stack.isMain,
                              },
                              update: {
                                  isMain: stack.isMain,
                              },
                          };
                      })
                    : [];

            this.logger.debug(
                `üîç [INFO] upsertStacks Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ± ÏôÑÎ£å: ${JSON.stringify(upsertStacks)}`,
            );

            // ÌîÑÎ°úÏ†ùÌä∏ ÌåÄ Îç∞Ïù¥ÌÑ∞ ÏóÖÎç∞Ïù¥Ìä∏
            this.logger.debug('üîÑ [INFO] ÌîÑÎ°úÏ†ùÌä∏ ÌåÄ Îç∞Ïù¥ÌÑ∞ ÏóÖÎç∞Ïù¥Ìä∏ ÏãúÏûë');
            const projectTeamUpdateData = {
                ...updateData,
                notionLink: updateData.notionLink || '', // ÌïÑÏàò ÌïÑÎìú Í∏∞Î≥∏Í∞í Ï∂îÍ∞Ä
            };

            const updatedProjectTeam = await this.prisma.projectTeam.update({
                where: { id },
                data: {
                    ...projectTeamUpdateData,
                    resultImages:
                        imageUrls.length > 0
                            ? {
                                  create: imageUrls.map((url) => ({
                                      imageUrl: url,
                                  })),
                              }
                            : undefined,
                    projectMember:
                        upsertMembers.length > 0
                            ? { upsert: upsertMembers }
                            : undefined,
                    teamStacks:
                        upsertStacks.length > 0
                            ? { upsert: upsertStacks }
                            : undefined,
                },
                include: {
                    resultImages: true,
                    projectMember: true,
                    teamStacks: true,
                },
            });

            this.logger.debug('‚úÖ [SUCCESS] ÌîÑÎ°úÏ†ùÌä∏ ÌåÄ Îç∞Ïù¥ÌÑ∞ ÏóÖÎç∞Ïù¥Ìä∏ ÏÑ±Í≥µ');
            this.logger.debug(
                `üìò [RESULT] ÏóÖÎç∞Ïù¥Ìä∏Îêú Îç∞Ïù¥ÌÑ∞: ${JSON.stringify(updatedProjectTeam)}`,
            );
            return updatedProjectTeam;
        } catch (error) {
            this.logger.error(
                '‚ùå [ERROR] updateProjectTeam ÏóêÏÑú ÏòàÏô∏ Î∞úÏÉù: ',
                error,
            );
            throw new Error('Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÏóêÎü¨Í∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
        }
    }
}
