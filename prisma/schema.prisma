generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int          @id @default(autoincrement())
  createdAt     DateTime     @default(now())
  updatedAt     DateTime
  isDeleted     Boolean      @default(false)
  name          String
  email         String
  year          Int
  password      String
  isLft         Boolean      @default(false)
  githubUrl     String       @db.VarChar(200)
  blogUrl       String       @db.VarChar(200)
  mainPosition  String       @db.VarChar(100)
  subPosition   String?      @db.VarChar(100) 
  school        String       @db.VarChar(100)
  class         String       @db.VarChar(100)
  roleId        Int?

  role          Role?          @relation("UserRoles", fields: [roleId], references: [id])          
  blogs         Blog[]         @relation("UserBlogs")
  resumes       Resume[]       @relation("UserResumes")
  profiles      Profile[]      @relation("UserProfiles")
  bookmarks     Bookmark[]     @relation("UserBookmarks")
  likes         Like[]         @relation("UserLikes")
  teamMembers   TeamMember[] 
  sessions      Session[]
}

model Role {
  id    Int    @id @default(autoincrement())
  name  String @db.VarChar(100)

  users User[] @relation("UserRoles")
}

model Profile {
  id            Int          @id @default(autoincrement())
  createdAt     DateTime     @default(now())
  updatedAt     DateTime
  isDeleted     Boolean      @default(false)
  nickname      String       @db.VarChar(200)
  profileImage  String       @db.VarChar(200)
  experience    String?      @db.VarChar(200) 
  company       String?      @db.VarChar(200)
  stack         String       @db.VarChar(200)
  userId        Int

  user          User         @relation("UserProfiles", fields: [userId], references: [id]) 
}

model TeamMember {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime
  isDeleted   Boolean   @default(false)
  isLeader    Boolean
  teamRole    String    @db.VarChar(100)
  team        Team      @relation(fields: [teamId], references: [id])
  teamId      Int
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
}

model Team {
  id          Int          @id @default(autoincrement())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime
  isDeleted   Boolean      @default(false)
  isRecruited Boolean      @default(true)
  isFinished  Boolean      @default(true)
  name        String       @db.VarChar(100)
  category    String       @db.VarChar(100)
  teamStacks  TeamStack[]  
  teamMembers TeamMember[] 
}

model Stack {
  id          Int          @id @default(autoincrement())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime
  isDeleted   Boolean      @default(false)
  stack       String       @db.VarChar(200)
  category    stackCategory

  teamStacks  TeamStack[]
}

enum stackCategory {
  BACKEND
  FRONTEND
  MONITORING
  INFRA
}

model TeamStack {
  id          Int          @id @default(autoincrement())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime
  isDeleted   Boolean      @default(false)
  stackId     Int
  teamId      Int
  stack       Stack        @relation(fields: [stackId], references: [id])
  team        Team         @relation(fields: [teamId], references: [id])
}

model Resume {
  id          Int          @id @default(autoincrement())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime
  isDeleted   Boolean      @default(false)
  userId      Int
  title       String       @db.VarChar(100)
  url         String       @db.VarChar(100)
  isMain      Boolean      @default(false)
  likeCount   Int
  viewCount   Int
  ResumeType  ResumeType

  user        User         @relation("UserResumes", fields: [userId], references: [id])
}

model Blog {
  id          Int          @id @default(autoincrement())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime
  isDeleted   Boolean      @default(false)
  userId      Int
  title       String       @db.VarChar(100)
  url         String       @db.VarChar(100)
  likeCount   Int          @default(0)
  viewCount   Int          @default(0)

  user        User         @relation("UserBlogs", fields: [userId], references: [id])
}

model Bookmark{
  id           Int          @id @default(autoincrement())
  userId       Int
  createdAt    DateTime     @default(now())
  updatedAt    DateTime
  isDeleted    Boolean      @default(false)
  contentId   Int          
  Bookmarktype Type

  user        User         @relation("UserBookmarks", fields: [userId], references: [id])
}

model Like{
  id          Int          @id @default(autoincrement())
  userId      Int
  createdAt   DateTime     @default(now())
  updatedAt   DateTime
  isDeleted   Boolean      @default(false)
  contentId  Int          
  Liketype    Type

  user        User         @relation("UserLikes", fields: [userId], references: [id])
}

enum Type {
  RESUME
  SESSION
  BLOG
}

enum  ResumeType {
  PORTFOLIO
  ICT
  SOMA
  OTHER
}

model Calendar {
  id          Int          @id @default(autoincrement())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime
  isDeleted   Boolean      @default(false)
  events      Event[]      @relation("CalendarEvents")
  jobInfo     JobInfo[]    @relation("CalendarJobInfo")
  conferences Conference[] @relation("CalendarConferences")
}

model Event {
  id          Int          @id @default(autoincrement())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime
  isDeleted   Boolean      @default(false)
  calendarId  Int
  isOnline    Boolean      @default(false)
  title       String       @db.VarChar(200)
  place       String       @db.VarChar(200)
  date        DateTime
  description String       @db.VarChar(200)
  startDate   DateTime
  endDate     DateTime

  calendar    Calendar    @relation("CalendarEvents", fields: [calendarId], references: [id])
}

model JobInfo {
  id          Int          @id @default(autoincrement())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime
  isDeleted   Boolean      @default(false)
  calendarId  Int
  company     String       @db.VarChar(100)
  description String       @db.VarChar(200)
  url         String       @db.VarChar(200)
  position    String       @db.VarChar(200)
  startDate   DateTime
  endDate     DateTime

  calendar    Calendar    @relation("CalendarJobInfo", fields: [calendarId], references: [id])
}

model Conference {
  id          Int          @id @default(autoincrement())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime
  isDeleted   Boolean      @default(false)
  calendarId  Int
  title       String       @db.VarChar(100)
  url         String       @db.VarChar(200)
  startDate   DateTime
  endDate     DateTime
  deadline    DateTime
  price       Int
  isOnline    Boolean      @default(false)

  calendar    Calendar     @relation("CalendarConferences", fields: [calendarId], references: [id])
}

model Session {
  id          Int          @id @default(autoincrement())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime
  isDeleted   Boolean      @default(false)
  isPublic    Boolean      
  title       String       @db.VarChar(200)
  description String       @db.VarChar(200)
  likeCount   Int          
  viewCount   Int
  url         String       @db.VarChar(200)
  date        DateTime
  category    String       @db.VarChar(200)

  user        User     @relation(fields: [userId], references: [id])
  userId      Int 
}
