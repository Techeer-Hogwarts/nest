generator client {
  provider = "prisma-client-js"
}

generator kysely {
  provider = "prisma-kysely"
  output = "../src/infra/prisma/db"
  fileName = "types.ts"
    enumFileName = "enums.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int                 @id @default(autoincrement())
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  isDeleted         Boolean             @default(false)
  name              String
  email             String              @unique
  nickname          String?             @db.VarChar(200)
  year              Int
  password          String
  isLft             Boolean             @default(false)
  githubUrl         String              @db.VarChar(500)
  mainPosition      String              @db.VarChar(100)
  subPosition       String?             @db.VarChar(100)
  school            String              @db.VarChar(100)
  profileImage      String              @db.VarChar(1000)
  stack             String[]            @default([])
  isAuth            Boolean             @default(false)
  roleId            Int
  grade             String              @db.VarChar(100)
  mediumUrl         String?             @db.VarChar(300)
  tistoryUrl        String?             @db.VarChar(300)
  velogUrl          String?             @db.VarChar(300)
  blogs             Blog[]              @relation("UserBlogs")
  bookmarks         Bookmark[]          @relation("UserBookmarks")
  events            Event[]             @relation("UserEvents")
  likes             Like[]              @relation("UserLikes")
  permissionRequest PermissionRequest[] @relation("UserPermissionRequests")
  projectMembers    ProjectMember[]
  resumes           Resume[]            @relation("UserResumes")
  sessions          Session[]           @relation("UserSessions")
  studyMembers      StudyMember[]
  role              Role                @relation("UserRole", fields: [roleId], references: [id])
  experiences       UserExperience[]    @relation("UserToExperiences")
}

model UserExperience {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  isDeleted   Boolean   @default(false)
  userId      Int
  position    String    @db.VarChar(100)
  companyName String    @db.VarChar(200)
  startDate   DateTime
  endDate     DateTime?
  category    String    @db.VarChar(100)
  isFinished  Boolean   @default(false)
  user        User      @relation("UserToExperiences", fields: [userId], references: [id])

  @@unique([userId, position, companyName, startDate])
}

model Role {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  parentId  Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  parent    Role?    @relation("RoleParent", fields: [parentId], references: [id])
  children  Role[]   @relation("RoleParent")
  users     User[]   @relation("UserRole")
}

model PermissionRequest {
  id              Int            @id @default(autoincrement())
  userId          Int
  requestedRoleId Int
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  status          StatusCategory @default(PENDING)
  user            User           @relation("UserPermissionRequests", fields: [userId], references: [id])
}

model ProjectMember {
  id            Int            @id @default(autoincrement())
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  isDeleted     Boolean        @default(false)
  isLeader      Boolean
  teamRole      String         @db.VarChar(100)
  projectTeamId Int
  userId        Int
  summary       String         @db.VarChar(3000)
  status        StatusCategory
  projectTeam   ProjectTeam    @relation(fields: [projectTeamId], references: [id])
  user          User           @relation(fields: [userId], references: [id])

  @@unique([projectTeamId, userId], name: "projectTeamId_userId_unique")
}

model StudyMember {
  id          Int            @id @default(autoincrement())
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  isDeleted   Boolean        @default(false)
  isLeader    Boolean
  studyTeamId Int
  userId      Int
  summary     String         @db.VarChar(3000)
  status      StatusCategory
  studyTeam   StudyTeam      @relation(fields: [studyTeamId], references: [id])
  user        User           @relation(fields: [userId], references: [id])

   @@unique([studyTeamId, userId])
}

model Stack {
  id         Int           @id @default(autoincrement())
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  isDeleted  Boolean       @default(false)
  name       String        @unique
  category   StackCategory
  teamStacks TeamStack[]
}

model TeamStack {
  id            Int         @id @default(autoincrement())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  isDeleted     Boolean     @default(false)
  isMain        Boolean     @default(false)
  stackId       Int
  projectTeamId Int
  projectTeam   ProjectTeam @relation(fields: [projectTeamId], references: [id])
  stack         Stack       @relation(fields: [stackId], references: [id])
}

model ProjectTeam {
  id              Int                  @id @default(autoincrement())
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  isDeleted       Boolean              @default(false)
  isRecruited     Boolean              @default(true)
  isFinished      Boolean              @default(true)
  name            String               @unique @db.VarChar(100)
  githubLink      String               @db.VarChar(500)
  notionLink      String               @db.VarChar(500)
  projectExplain  String               @db.VarChar(500)
  frontendNum     Int
  backendNum      Int
  devopsNum       Int
  fullStackNum         Int
  dataEngineerNum Int
  recruitExplain  String               @db.VarChar(3000)
  teamStacks      TeamStack[]
  projectMember   ProjectMember[]
  resultImages    ProjectResultImage[]
  mainImages      ProjectMainImage[]
  likeCount       Int                  @default(0)
  viewCount       Int                  @default(0)
}

model StudyTeam {
  id             Int                @id @default(autoincrement())
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  isDeleted      Boolean            @default(false)
  isRecruited    Boolean            @default(true)
  isFinished     Boolean            @default(true)
  name           String             @unique @db.VarChar(100)
  githubLink     String             @db.VarChar(500)
  notionLink     String             @db.VarChar(500)
  studyExplain   String             @db.VarChar(3000)
  goal           String             @db.VarChar(3000)
  rule           String             @db.VarChar(3000)
  recruitNum     Int
  recruitExplain String             @db.VarChar(3000)
  studyMember    StudyMember[]
  resultImages   StudyResultImage[]
  likeCount      Int                @default(0)
  viewCount      Int                @default(0)
}

model StudyResultImage {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  isDeleted   Boolean   @default(false)
  imageUrl    String    @db.VarChar(3000)
  studyTeamId Int
  studyTeam   StudyTeam @relation(fields: [studyTeamId], references: [id])
}

model ProjectResultImage {
  id            Int         @id @default(autoincrement())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  isDeleted     Boolean     @default(false)
  imageUrl      String      @db.VarChar(3000)
  projectTeamId Int
  projectTeam   ProjectTeam @relation(fields: [projectTeamId], references: [id])
}

model ProjectMainImage {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean  @default(false)
  imageUrl  String   @db.VarChar(3000)

  projectTeamId Int
  projectTeam   ProjectTeam @relation(fields: [projectTeamId], references: [id])
}

model Blog {
  id          Int          @id @default(autoincrement())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  isDeleted   Boolean      @default(false)
  userId      Int
  title       String       @db.VarChar(1000)
  url         String       @db.VarChar(2000)
  date        DateTime
  author      String?      @db.VarChar(300)
  authorImage String?      @db.VarChar(300)
  category    String       @db.VarChar(300)
  thumbnail   String?      @db.VarChar(2000)
  tags        String[]     @default([])
  user        User         @relation("UserBlogs", fields: [userId], references: [id])
  likeCount       Int             @default(0)
  viewCount       Int             @default(0)
}

model Like {
  id        Int             @id @default(autoincrement())
  userId    Int
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  isDeleted Boolean         @default(false)
  contentId Int
  category  String          @db.VarChar(50)
  user      User            @relation("UserLikes", fields: [userId], references: [id])

  @@unique([userId, contentId, category])
}

model Bookmark {
  id        Int             @id @default(autoincrement())
  userId    Int
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  isDeleted Boolean         @default(false)
  contentId Int
  category  String          @db.VarChar(50)

  user User @relation("UserBookmarks", fields: [userId], references: [id])

  @@unique([userId, contentId, category])
}

model Resume {
  id        Int            @id @default(autoincrement())
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  isDeleted Boolean        @default(false)
  userId    Int
  title     String         @db.VarChar(1000)
  url       String         @db.VarChar(1000)
  isMain    Boolean        @default(false)
  category  String         @db.VarChar(50)
  position  String         @db.VarChar(100)
  user      User           @relation("UserResumes", fields: [userId], references: [id])
  likeCount       Int             @default(0)
  viewCount       Int             @default(0)
}

model Event {
  id        Int           @id @default(autoincrement())
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  isDeleted Boolean       @default(false)
  category  String        @db.VarChar(50)
  title     String        @db.VarChar(2000)
  startDate DateTime
  endDate   DateTime?
  url       String?       @db.VarChar(200)
  userId    Int
  user      User          @relation("UserEvents", fields: [userId], references: [id])
}

model Session {
  id        Int             @id @default(autoincrement())
  userId    Int
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  isDeleted Boolean         @default(false)
  title     String          @db.VarChar(200)
  likeCount Int             @default(0)
  viewCount Int             @default(0)
  thumbnail String          @db.VarChar(3000)
  videoUrl  String?         @db.VarChar(3000)
  fileUrl   String?         @db.VarChar(3000)
  presenter String          @db.VarChar(50)
  date      String          @db.VarChar(50)
  category  String          @db.VarChar(50)
  position  String          @db.VarChar(50)
  user      User            @relation("UserSessions", fields: [userId], references: [id])
}

enum StatusCategory {
  APPROVED
  REJECT
  PENDING
}

enum StackCategory {
  BACKEND
  FRONTEND
  DATABASE
  DEVOPS
  OTHER
}


model SyncDb {
  id             Int      @id @default(autoincrement())
  lastSyncedAt   DateTime @default(dbgenerated("'2000-01-01 00:00:00'"))
}

