generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int       @id @default(autoincrement())
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  isDeleted           Boolean   @default(false)
  name                String
  email               String    @unique
  nickname            String?   @db.VarChar(200)
  year                Int
  password            String
  isLft               Boolean   @default(false)
  githubUrl           String    @db.VarChar(200)
  blogUrl             String    @db.VarChar(200)
  mainPosition        String    @db.VarChar(100)
  subPosition         String?   @db.VarChar(100)
  school              String    @db.VarChar(100)
  class               String    @db.VarChar(100)
  profileImage        String    @db.VarChar(200)
  stack               String[]  @default([]) // 배열의 기본값을 빈 배열로 설정
  isAuth              Boolean   @default(false)
  isIntern            Boolean?
  internPosition      String?   @db.VarChar(100)
  internCompanyName   String?   @db.VarChar(200)
  internStartDate     DateTime? // 인턴 시작 날짜
  internEndDate       DateTime? // 인턴 종료 날짜
  fullTimePosition    String?   @db.VarChar(100)
  isFullTime          Boolean?  @default(false)
  fullTimeCompanyName String?   @db.VarChar(200)
  fullTimeStartDate   DateTime? // 정규직 시작 날짜
  fullTimeEndDate     DateTime? // 정규직 종료 날짜
  roleId              Int

  role              Role?               @relation("UserRole", fields: [roleId], references: [id])
  blogs             Blog[]              @relation("UserBlogs")
  resumes           Resume[]            @relation("UserResumes")
  bookmarks         Bookmark[]          @relation("UserBookmarks")
  likes             Like[]              @relation("UserLikes")
  teamMembers       TeamMember[]
  sessions          Session[]           @relation("UserSessions")
  permissionRequest PermissionRequest[] @relation("UserPermissionRequests")
}

model Role {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  users     User[]   @relation("UserRole")
  parent    Role?    @relation("RoleParent", fields: [parentId], references: [id])
  parentId  Int?
  children  Role[]   @relation("RoleParent")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PermissionRequest {
  id              Int      @id @default(autoincrement())
  userId          Int
  requestedRoleId Int
  status          String   @default("PENDING") // 상태는 'PENDING', 'APPROVED' 등으로 관리
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user            User     @relation("UserPermissionRequests", fields: [userId], references: [id])
}

model TeamMember {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  isDeleted   Boolean   @default(false)
  isLeader    Boolean
  teamRole    String    @db.VarChar(100)
  team        Team      @relation(fields: [teamId], references: [id])
  teamId      Int
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
}

enum StackCategory {
  BACKEND
  FRONTEND
  MONITORING
  INFRA
  ETC
}

model Stack {
  id          Int          @id @default(autoincrement())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  isDeleted   Boolean      @default(false)
  name        String
  category    StackCategory
  teamStacks  TeamStack[]
}

model TeamStack {
  id          Int          @id @default(autoincrement())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  isDeleted   Boolean      @default(false)
  isMain      Boolean      @default(false)
  stackId     Int
  teamId      Int
  stack       Stack        @relation(fields: [stackId], references: [id])
  team        Team         @relation(fields: [teamId], references: [id])
}

model Team {
  id          Int          @id @default(autoincrement())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  isDeleted   Boolean      @default(false)
  isRecruited Boolean      @default(true)
  isFinished  Boolean      @default(true)
  name        String       @db.VarChar(100)
  category    String       @db.VarChar(100)
  teamStacks  TeamStack[]
  teamMembers TeamMember[]
}

enum BlogCategory {
  TECHEER
  SHARED
}

model Blog {
  id          Int          @id @default(autoincrement())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  isDeleted   Boolean      @default(false)
  userId      Int
  title       String       @db.VarChar(100)
  url         String       @db.VarChar(200)
  thumbnail   String?      @db.VarChar(200)
  author      String?      @db.VarChar(100)
  authorImage String?      @db.VarChar(200)
  date        DateTime
  category    BlogCategory
  tags         String[]    @default([])
  likeCount   Int          @default(0)
  viewCount   Int          @default(0)

  user        User         @relation("UserBlogs", fields: [userId], references: [id])
}

enum ContentCategory {
  RESUME
  SESSION
  BLOG
}

model Like {
  id          Int          @id @default(autoincrement())
  userId      Int
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  isDeleted   Boolean      @default(false)
  contentId   Int
  category    ContentCategory

  user        User         @relation("UserLikes", fields: [userId], references: [id])

  @@unique([userId, contentId, category]) // 복합 고유 키 설정
}

model Bookmark {
  id        Int             @id @default(autoincrement())
  userId    Int
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  isDeleted Boolean         @default(false)
  contentId Int
  category  ContentCategory

  user User @relation("UserBookmarks", fields: [userId], references: [id])

  @@unique([userId, contentId, category]) // 복합 고유 키 설정
}

enum ResumeCategory {
  PORTFOLIO
  ICT
  SOMA
  OTHER
}

model Resume {
  id          Int          @id @default(autoincrement())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  isDeleted   Boolean      @default(false)
  userId      Int
  title       String       @db.VarChar(100)
  url         String       @db.VarChar(100)
  isMain      Boolean      @default(false)
  likeCount   Int          @default(0)
  viewCount   Int          @default(0)
  category    ResumeCategory

  user        User         @relation("UserResumes", fields: [userId], references: [id])
}

enum EventCategory {
  TECHEER
  CONFERENCE
  JOBINFO
}

model Event {
  id          Int          @id @default(autoincrement())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  isDeleted   Boolean      @default(false)
  category    EventCategory
  title       String       @db.VarChar(200)
  startDate   DateTime
  endDate     DateTime?
  url         String?      @db.VarChar(200)
}

enum SessionDate {
  FIRST
  SECOND
  THIRD
  FOURTH
  FIFTH
  SIXTH
  SEVENTH
  EIGHTH
  SUMMER_2022
  WINTER_2022
  SUMMER_2023
  WINTER_2023
  SUMMER_2024
}

enum SessionCategory {
  BOOTCAMP
  PARTNERS
}

enum SessionPosition {
  FRONTEND
  BACKEND
  DEVOPS
  OTHERS
}

model Session {
  id          Int          @id @default(autoincrement())
  userId      Int
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  isDeleted   Boolean      @default(false)
  title       String       @db.VarChar(200)
  likeCount   Int          @default(0)
  viewCount   Int          @default(0)
  thumbnail   String       @db.VarChar(200)
  videoUrl    String       @db.VarChar(200)
  fileUrl     String       @db.VarChar(200)
  presenter   String       @db.VarChar(50)
  date        SessionDate
  category    SessionCategory
  position    SessionPosition

  user        User         @relation("UserSessions", fields: [userId], references: [id])
}
