generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int          @id @default(autoincrement())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime
  isDeleted   Boolean      @default(false)
  profile     String
  name        String
  nickname    String
  email       String
  password    String
  isActive    Boolean      @default(false)
  year        Int
  isLft       Boolean      @default(false)
  role        String

  blogs       Blog[]       @relation("UserBlogs")
  resumes     Resume[]     @relation("UserResumes")
}

model Blog {
  id          Int          @id @default(autoincrement())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime
  isDeleted   Boolean      @default(false)
  userId      Int
  title       String       @db.VarChar(100)
  url         String       @db.VarChar(100)
  likeCount   Int
  viewCount   Int

  user        User         @relation("UserBlogs", fields: [userId], references: [id])
}

model Resume {
  id          Int          @id @default(autoincrement())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime
  isDeleted   Boolean      @default(false)
  userId      Int
  title       String       @db.VarChar(100)
  url         String       @db.VarChar(100)
  isMain      Boolean      @default(false)
  likeCount   Int
  viewCount   Int

  user        User         @relation("UserResumes", fields: [userId], references: [id])
}

model Bookmark{
  id          Int          @id @default(autoincrement())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime
  isDeleted   Boolean      @default(false)
  contend_id  Int          
  type        Type
}

enum Type {
  RESUME
  SESSION
  BLOG
}

model Team{
  id          Int          @id @default(autoincrement())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime
  isDeleted   Boolean      @default(false)
  isRecruited Boolean      @default(true)
  isFinished  Boolean      @default(true)
  name        String       @db.VarChar(100)
  category    String       @db.VarChar(100)
}

model Calendar {
  id          Int          @id @default(autoincrement())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime
  isDeleted   Boolean      @default(false)
  events      Event[]      @relation("CalendarEvents")
  jobInfo     JobInfo[]    @relation("CalendarJobInfo")
  conferences Conference[] @relation("CalendarConferences")
}

model Event {
  id          Int          @id @default(autoincrement())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime
  isDeleted   Boolean      @default(false)
  calendarId  Int
  isOnline    Boolean      @default(false)
  title       String       @db.VarChar(200)
  place       String       @db.VarChar(200)
  date        DateTime
  description String       @db.VarChar(200)

  calendar    Calendar    @relation("CalendarEvents", fields: [calendarId], references: [id])
}

model JobInfo {
  id          Int          @id @default(autoincrement())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime
  isDeleted   Boolean      @default(false)
  calendarId  Int
  company     String       @db.VarChar(100)
  description String       @db.VarChar(200)
  url         String       @db.VarChar(200)
  position    String       @db.VarChar(200)

  calendar    Calendar    @relation("CalendarJobInfo", fields: [calendarId], references: [id])
}

model Conference {
  id          Int          @id @default(autoincrement())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime
  isDeleted   Boolean      @default(false)
  calendarId  Int
  title       String       @db.VarChar(100)
  url         String       @db.VarChar(200)
  startDate   DateTime
  endDate     DateTime
  deadline    DateTime
  price       Int
  isOnline    Boolean      @default(false)

  calendar    Calendar    @relation("CalendarConferences", fields: [calendarId], references: [id])
}